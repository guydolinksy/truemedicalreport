apiVersion: apps/v1
kind: Deployment
metadata:
  name: '{{ .Release.Name }}-backend'
  labels:
    component: backend
    project: tmr
    release: '{{ .Release.Name }}'
spec:
  replicas:  {{ .Values.backend.replicas }}
  selector:
    matchLabels:
      component: backend
      project: tmr
      release: '{{ .Release.Name }}'
  template:
    metadata:
      labels:
        component: backend
        project: tmr
        release: '{{ .Release.Name }}'
    spec:
      initContainers:
        - name: check-dal
          image: {{ .Values.global.helpers.busybox.image }}
          command:
            - sh
            - -c
            - |-
              OK=0
              echo "Checking dal port"
              while [ $OK != 1 ]; do
                  echo -n "."
                  nc -z {{ .Release.Name }}-dal {{ .Values.dal.port }} 2>&1 >/dev/null && OK=1 || sleep 1
              done
              echo
              echo "Done"
        - name: check-redis
          image: {{ .Values.global.helpers.busybox.image }}
          command:
            - sh
            - -c
            - |-
              OK=0
              echo "Checking redis port"
              while [ $OK != 1 ]; do
                  echo -n "."
                  nc -z {{ .Release.Name }}-redis {{ .Values.redis.port }} 2>&1 >/dev/null && OK=1 || sleep 1
              done
              echo
              echo "Done"
      containers:
        - name: backend
          image: '{{ .Values.backend.repository.image }}{{ if ne .Values.backend.repository.tag "" }}:{{ .Values.backend.repository.tag }}{{ end }}'
          ports:
            - name: backend
              containerPort: {{ .Values.backend.port }}
          env:
            - name: MONGO_CONNECTION
              value: '{"host": "{{ .Release.Name }}-mongo", "port": {{ .Values.mongo.port }}}'
            - name: REDIS_CONNECTION
              value: '"redis://{{ .Release.Name }}-redis:{{ .Values.redis.port }}/0"'
            - name: DAL_URL
              value: '"http://{{ .Release.Name }}-dal:{{ .Values.dal.port }}/dal"'
            - name: WS_URL
              value: '"ws://{{ .Release.Name }}-dal:{{ .Values.dal.port }}/dal/sync/ws"'
          readinessProbe:
            httpGet:
              port: {{ .Values.dal.port }}
              path: /api/docs
          volumeMounts: {{ if not (len .Values.backend.volumeMappings) }}[]{{ end }}
            {{- range $index, $value := .Values.backend.volumeMappings }}
            - name: 'volume-{{ $index }}'
              mountPath: {{ $value.containerPath }}
            {{end}}
      volumes: {{ if not (len .Values.backend.volumeMappings) }}[]{{ end }}
        {{- range $index, $value := .Values.backend.volumeMappings }}
        - name: 'volume-{{ $index }}'
          hostPath:
            path:  {{ $.Values.global.baseDir }}/{{ $value.relativePath }}
            type: DirectoryOrCreate
        {{end}}