{{ if eq .Values.digest.type "sheba" }}
apiVersion: apps/v1
kind: Deployment
metadata:
  name: '{{ .Release.Name }}-sheba-digest'
  labels:
    project: tmr
    component: sheba-digest
    release: '{{ .Release.Name }}'
spec:
  replicas: {{ .Values.digest.sheba.replicas }}
  selector:
    matchLabels:
      project: tmr
      component: sheba-digest
      release: '{{ .Release.Name }}'
  template:
    metadata:
      labels:
        project: tmr
        component: sheba-digest
        release: '{{ .Release.Name }}'
    spec:
      initContainers:
        - name: check-dal
          image: {{ .Values.global.helpers.busybox.image }}
          command:
            - sh
            - -c
            - |-
              OK=0
              echo "Checking dal port"
              while [ $OK != 1 ]; do
                  echo -n "."
                  nc -z {{ .Release.Name }}-dal {{ .Values.dal.port }} 2>&1 >/dev/null && OK=1 || sleep 1
              done
              echo
              echo "Done"
      containers:
        - name: sheba-digest
          image: '{{ .Values.digest.sheba.repository.image }}{{ if ne .Values.digest.sheba.repository.tag "" }}:{{ .Values.digest.sheba.repository.tag }}{{ end }}'
          ports:
            - name: sheba-digest
              containerPort: {{ .Values.digest.sheba.port }}
          env:
            - name: DAL_URL
              value: '"http://{{ .Release.Name }}-dal:{{ .Values.dal.port }}/dal"'
            - name: ARC_CONNECTION
              {{- if eq .Values.digest.sheba.input.type "internal" }}
              value: '"mssql+pyodbc://sa:Password123@{{ .Release.Name }}-sheba-arc:1433/dwh?driver=ODBC+Driver+18+for+SQL+Server&trustServerCertificate=yes"'
              {{- else }}
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.digest.sheba.input.external.secretName }}
                  key: arc_db
              {{- end }}
          readinessProbe:
            httpGet:
              port: {{ .Values.digest.sheba.port }}
              path: /digest/docs
          volumeMounts: {{ if not (len .Values.digest.sheba.volumeMappings) }}[]{{ end }}
            {{- range $index, $value := .Values.digest.sheba.volumeMappings }}
            - name: 'volume-{{ $index }}'
              mountPath: {{ $value.containerPath }}
            {{end}}
      volumes: {{ if not (len .Values.digest.sheba.volumeMappings) }}[]{{ end }}
        {{- range $index, $value := .Values.digest.sheba.volumeMappings }}
        - name: 'volume-{{ $index }}'
          hostPath:
            path:  {{ $.Values.global.baseDir }}/{{ $value.relativePath }}
            type: DirectoryOrCreate
        {{end}}
{{ end }}